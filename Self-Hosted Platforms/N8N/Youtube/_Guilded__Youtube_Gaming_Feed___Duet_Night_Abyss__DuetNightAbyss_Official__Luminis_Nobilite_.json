{
  "name": "(Guilded) Youtube Gaming Feed - Duet Night Abyss @DuetNightAbyss_Official [Luminis Nobilite]",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "9694f59e-336e-42b9-85e0-eb570dfd1374",
      "name": "XML",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        1200,
        260
      ]
    },
    {
      "parameters": {
        "url": "https://www.youtube.com/feeds/videos.xml?channel_id=UCEds5pTo7cw1rUUkr2slzwg",
        "options": {}
      },
      "id": "2e38d9a0-f5d3-4da3-affc-c14adf1c8097",
      "name": "HTTP Request - Youtube API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        980,
        380
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return $json.feed.entry[0];"
      },
      "id": "5437e9da-5585-4a34-a120-f6560272ace6",
      "name": "Filter Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1400,
        140
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function convertTimestamp(inputTimestamp) {\n  const dateObj = new Date(inputTimestamp);\n  const options = { weekday: 'short', day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZone: 'GMT', timeZoneName: 'short' };\n  return dateObj.toLocaleString('en-US', options);\n}\n\nconst iconUrlFinal = 'https://raw.githubusercontent.com/LuminisNobilite/Eclipse/main/Assets/Twitter/Twitter%20Gaming%20Feeds/Avatars/%40DNAbyss_EN_400x400.jpg';\nconst nameInit = $('RSS Feed Trigger').item.json['author'];\n\nconst snippet = $('Set').item.json.data[0].snippet;\n\nlet thumbnailUrl;\n\nif (snippet.thumbnails.maxres && snippet.thumbnails.maxres.url) {\n  thumbnailUrl = snippet.thumbnails.maxres.url;\n} else if (snippet.thumbnails.high && snippet.thumbnails.high.url) {\n  thumbnailUrl = snippet.thumbnails.high.url;\n} else if (snippet.thumbnails.medium && snippet.thumbnails.medium.url) {\n  thumbnailUrl = snippet.thumbnails.medium.url;\n} else if (snippet.thumbnails.default && snippet.thumbnails.default.url) {\n  thumbnailUrl = snippet.thumbnails.default.url;\n} else {\n  // Handle the case when no suitable thumbnail is available\n  thumbnailUrl = 'https://images5.alphacoders.com/123/1235223.jpg'; // Custom URL\n}\n\n\nconst inputTimestamp = $('RSS Feed Trigger').item.json.pubDate;\nconst convertedTimestamp = convertTimestamp(inputTimestamp);\n\nconst textMod = String.prototype.concat(\"Youtube â€¢ \", convertedTimestamp);\n\nlet descriptionHyperlinked = $('Filter Code').item.json['media:group']['media:description'];\n\n// Use a regular expression to search for URLs within the description field\nconst urlRegex = /(https?:\\/\\/[^\\s]+)/g;\ndescriptionHyperlinked = descriptionHyperlinked.replace(urlRegex, '[$1]($1)');\n\n// Regular expression pattern to match hashtags\nconst hashtagRegex = /(^|\\s)(#[^\\s]+)/g;\n// Find all the hashtags in the description string\nconst hashtags = descriptionHyperlinked.match(hashtagRegex);\n// Replace the hashtags with URLs\nif (hashtags) {\n  hashtags.forEach(hashtag => {\n    const cleanHashtag = hashtag.trim(); // Remove leading and trailing spaces\n    const hashtagUrl = `https://www.youtube.com/hashtag/${cleanHashtag.toLowerCase().replace('#', '')}`;\n    const hashtagLink = `[${cleanHashtag}](${hashtagUrl})`; // Use cleaned hashtag\n    // Check if there's a closing square bracket ']' after the hashtag, and if not, add a space\n    if (!/\\]\\([^)]*$/.test(descriptionHyperlinked)) {\n      descriptionHyperlinked = descriptionHyperlinked.replace(hashtag, `${hashtagLink} `); // Insert space after the link\n    } else {\n      descriptionHyperlinked = descriptionHyperlinked.replace(hashtag, `${hashtagLink}`);\n    }\n  });\n}\n\n// Regular expression pattern to match @ mentions\nconst mentionRegex = /(^|\\s)@(\\w+)/g;\n// Find all the @ mentions in the description string\nconst mentions = descriptionHyperlinked.match(mentionRegex);\n// Replace the @ mentions with URLs\nif (mentions) {\n  mentions.forEach(mention => {\n    const username = mention.trim().substring(1); // Remove leading '@' and trim spaces\n    const mentionUrl = `https://youtube.com/${username}`;\n    const mentionLink = `[@${username}](${mentionUrl})`; // Include the '@' symbol\n    descriptionHyperlinked = descriptionHyperlinked.replace(mention, mentionLink);\n  });\n}\n\n\nlet embed = {\n    color: 16711680,\n    author: {\n      name: nameInit,\n      url: $(\"RSS Feed Trigger\").item.json.link,\n      icon_url: iconUrlFinal,\n    },\n    url: $(\"RSS Feed Trigger\").item.json['link'],\n    image: {\n      url: thumbnailUrl,\n    },\n    footer: {\n      text: textMod,\n      icon_url: 'https://raw.githubusercontent.com/LuminisNobilite/Eclipse/main/Assets/Icons/Guilded/Guilded%20-%20Gold%20Youtube%20Icon%20v1.png',\n    },\n  };\n    embed.title = $('RSS Feed Trigger').item.json['title'];\n    embed.description = descriptionHyperlinked;\n  const body = {\n    embeds: [embed],\n  };\n  return { body };"
      },
      "id": "c9eca413-4267-4f77-a17e-04ffa7a9ecb5",
      "name": "Main Driver Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1820,
        140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://media.guilded.gg/webhooks/REDACTED",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.body }}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10,
              "batchInterval": 10000
            }
          }
        }
      },
      "id": "1b042699-9439-4f9a-8d58-f6312c3bd35f",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1980,
        260
      ]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/youtube/v3/videos?id={{ $json['yt:videoId'] }}&key=REDACTED&part=snippet&fields=items/snippet/thumbnails",
        "options": {}
      },
      "id": "8bac3e6f-b412-4cca-b577-c320582b4ef1",
      "name": "Youtube Data API V3 HTTP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1500,
        380
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "data",
              "value": "={{ $json.items }}"
            },
            {
              "name": "data[0]",
              "value": "={{ $json.items[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "605b89f3-9176-44a8-bc91-4ed976f3160b",
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        1660,
        260
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX"
            }
          ]
        },
        "feedUrl": "https://www.youtube.com/feeds/videos.xml?channel_id=UCEds5pTo7cw1rUUkr2slzwg"
      },
      "id": "5fbfdd71-f46b-4a54-b15b-bc88427be5c6",
      "name": "RSS Feed Trigger",
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        800,
        380
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "XML": {
      "main": [
        [
          {
            "node": "Filter Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Youtube API": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Code": {
      "main": [
        [
          {
            "node": "Youtube Data API V3 HTTP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Main Driver Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Youtube Data API V3 HTTP": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Main Driver Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Feed Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request - Youtube API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionOrder": "v1"
  },
  "versionId": "38a24457-4cfe-4938-90d2-c685213f39f2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f3e8646dc25bb703680f7fd48308e56289d71dc10dc3ea0c5d57254342b6a676"
  },
  "id": "R6Jnokm8iuXP7CQL",
  "tags": []
}