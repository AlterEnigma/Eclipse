{
  "name": "(Guilded) Youtube Community Feed - CounterSide Global [Luminis Nobilite]",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "dateTime": [
            {
              "value1": "={{$json[\"isoDate\"]}}",
              "value2": "={{ $now.minus({hours: 1}) }}"
            }
          ]
        }
      },
      "name": "New post check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        860,
        640
      ],
      "id": "8c265db0-f251-4313-9902-b50020a6563d"
    },
    {
      "parameters": {
        "url": "https://rsshub.app/youtube/community/@countersideglobal",
        "options": {}
      },
      "name": "RSS Feed Read",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        680,
        640
      ],
      "id": "13388126-e346-4acc-98e9-9e0cdee4871c"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "id": "59a390c5-2735-4a08-97d8-6f42a2baad13",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        500,
        640
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function convertTimestamp(inputTimestamp) {\n  const dateObj = new Date(inputTimestamp);\n  const options = {\n    weekday: 'short',\n    day: '2-digit',\n    month: 'short',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    timeZone: 'GMT',\n    timeZoneName: 'short',\n  };\n  return dateObj.toLocaleString('en-US', options);\n}\n\nconst inputTimestamp = $('RSS Feed Read').item.json.pubDate;\nconst convertedTimestamp = convertTimestamp(inputTimestamp);\n\n\nconst regexPattern = /@/i;\nconst creator = $('RSS Feed Read').item.json.creator;\nconst iconUrl = \"https://unavatar.io/twitter/CounterSideGBL?fallback=https://raw.githubusercontent.com/LuminisNobilite/Eclipse/main/Assets/Twitter/Twitter%20Gaming%20Feeds/Avatars/%40CounterSideGBL_400x400.jpg\";\nconst inputContent = $('RSS Feed Read').item.json.content;\nconst regex = /<img\\s+[^>]*src=\"([^\"]+)\"[^>]*>/g;\nconst match = regex.exec(inputContent);\nconst nameInit = `${creator}`;\n\n\nlet descriptionHyperlinked = $('RSS Feed Read').item.json['contentSnippet'];\n// Use a regular expression to search for URLs within the description field\nconst urlRegex = /(https?:\\/\\/[^\\s]+)/g;\ndescriptionHyperlinked = descriptionHyperlinked.replace(urlRegex, '[$1]($1)');\n// Regular expression pattern to match hashtags\nconst hashtagRegex = /(^|\\s)(#[^\\s]+)/g;\n// Find all the hashtags in the description string\nconst hashtags = descriptionHyperlinked.match(hashtagRegex);\n// Replace the hashtags with URLs\nif (hashtags) {\n  hashtags.forEach(hashtag => {\n    const cleanHashtag = hashtag.trim(); // Remove leading and trailing spaces\n    const hashtagUrl = `https://www.youtube.com/hashtag/${cleanHashtag.toLowerCase().replace('#', '')}`;\n    const hashtagLink = `[${cleanHashtag}](${hashtagUrl})`; // Use cleaned hashtag\n    // Check if there's a closing square bracket ']' after the hashtag, and if not, add a space\n    if (!/\\]\\([^)]*$/.test(descriptionHyperlinked)) {\n      descriptionHyperlinked = descriptionHyperlinked.replace(hashtag, `${hashtagLink} `); // Insert space after the link\n    } else {\n      descriptionHyperlinked = descriptionHyperlinked.replace(hashtag, `${hashtagLink}`);\n    }\n  });\n}\n\n// Regular expression pattern to match @ mentions\nconst mentionRegex = /(^|\\s)@(\\w+)/g;\n// Find all the @ mentions in the description string\nconst mentions = descriptionHyperlinked.match(mentionRegex);\n// Replace the @ mentions with URLs\nif (mentions) {\n  mentions.forEach(mention => {\n    const mentionWithoutSpace = mention.replace(/\\s/g, ''); // Remove any spaces before the mention\n    const username = mentionWithoutSpace.substring(1);\n    const mentionUrl = `https://twitter.com/${username}`;\n    const mentionLink = ` [@${username}](${mentionUrl})`; // Include the '@' symbol\n    descriptionHyperlinked = descriptionHyperlinked.replace(mention, mentionLink);\n  });\n}\n\n\nif (match && match[1]) {\n  const imgSrc = match[1];\n  let embed = {\n    color: 1942002,\n    author: {\n      name: nameInit,\n      url: $(\"RSS Feed Read\").item.json.link,\n      icon_url: iconUrl,\n    },\n    url: $(\"RSS Feed Read\").item.json['link'],\n    image: {\n      url: imgSrc,\n    },\n    footer: {\n      text: String.prototype.concat('Youtube • ', convertedTimestamp),\n      icon_url: 'https://raw.githubusercontent.com/LuminisNobilite/Eclipse/main/Assets/Icons/Guilded/Guilded%20-%20Gold%20Youtube%20Icon%20v1.png',\n    },\n  };\n    embed.description = descriptionHyperlinked;\n  const body = {\n    embeds: [embed],\n  };\n  return { body };\n} else {\n  let embed = {\n     color: 1942002,\n    author: {\n      name: nameInit,\n      url: $(\"RSS Feed Read\").item.json.link,\n      icon_url: iconUrl,\n    },\n    url: $(\"RSS Feed Read\").item.json['link'],\n    footer: {\n      text: String.prototype.concat('Youtube • ', convertedTimestamp),\n      icon_url: 'https://raw.githubusercontent.com/LuminisNobilite/Eclipse/main/Assets/Icons/Guilded/Guilded%20-%20Gold%20Youtube%20Icon%20v1.png',\n    },\n  };\n  embed.description = descriptionHyperlinked;\n  const body = {\n    embeds: [embed],\n  };\n  return { body };\n}"
      },
      "id": "ba1b1ae1-7ee3-417e-99f5-7dc6fb4ea8d2",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1080,
        640
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://media.guilded.gg/webhooks/REDACTED",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.body }}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10,
              "batchInterval": 10000
            }
          }
        }
      },
      "id": "a86345bf-4d5d-46e7-ad34-e2ee8a2f1a10",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1260,
        640
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "New post check": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Feed Read": {
      "main": [
        [
          {
            "node": "New post check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "RSS Feed Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "executionOrder": "v1"
  },
  "versionId": "d5f1b508-89c8-4164-9d4d-1265ee55636e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f3e8646dc25bb703680f7fd48308e56289d71dc10dc3ea0c5d57254342b6a676"
  },
  "id": "kEMxDCKE7t1SSN23",
  "tags": []
}