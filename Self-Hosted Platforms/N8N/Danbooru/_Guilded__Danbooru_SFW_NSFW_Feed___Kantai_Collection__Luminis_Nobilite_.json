{
  "name": "(Guilded) Danbooru SFW/NSFW Feed - Kantai Collection [Luminis Nobilite]",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://media.guilded.gg/webhooks/REDACTED",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "payload_json",
              "value": "={{ JSON.stringify($json.itemPayload) }}"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "e103b391-401a-4961-83eb-478e29355f9c",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2720,
        400
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e57da7dd-439e-4f73-bf4d-9c305ec59248",
      "name": "XML",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        1000,
        380
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.items }}",
        "options": {}
      },
      "id": "9f3ecd6f-7efa-404f-9190-ab843c3fea6d",
      "name": "Danbooru API - Post URL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1720,
        380
      ]
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "=data",
        "extractionValues": {
          "values": [
            {
              "key": "ogImage",
              "cssSelector": "meta[property=\"og:image\"]",
              "returnValue": "attribute",
              "attribute": "content"
            }
          ]
        },
        "options": {}
      },
      "id": "192425d4-6bd9-478e-af13-50e2151a5ae1",
      "name": "HTML - Extract OG Image URL",
      "type": "n8n-nodes-base.html",
      "typeVersion": 1,
      "position": [
        1900,
        380
      ]
    },
    {
      "parameters": {
        "url": "https://danbooru.donmai.us/posts.atom?tags=kantai_collection",
        "options": {}
      },
      "id": "1aefa2c7-d7d3-4298-b948-28c7a8c6c393",
      "name": "Danbooru API HTTP Request - Atom Feed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        840,
        380
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.ogImage }}",
        "options": {}
      },
      "id": "7b77a07c-e868-4c2b-9a7a-c610a7f39a00",
      "name": "Danbooru CDN API - Image Binary Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2080,
        380
      ]
    },
    {
      "parameters": {
        "jsCode": "function convertTimestamp(inputTimestamp) {\n  const dateObj = new Date(inputTimestamp);\n  const options = { weekday: 'short', day: '2-digit', month: 'short', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZone: 'GMT', timeZoneName: 'short' };\n  return dateObj.toLocaleString('en-US', options);\n}\n\nconst entries = $('Merge').item.json['filteredEntries'];\n\nconst payloads = [];\n\nfor (let i = 0; i < entries.length; i++) {\n  const item = $('Set').item.json.fileNameProperty[i];\n  if (item && item.fileNameData && item.fileNameData.fileName) {\n    const fileName = item.fileNameData.fileName;\n    const entry = entries[i];\n    const inputTimestamp = entry.updated;\n    const authorName = entry.author.name;\n    const convertedTimestamp = convertTimestamp(inputTimestamp);\n\n    const payload = {\n      embeds: [],\n    };\n\n    const embed = {\n      color: 11438438,\n      author: {\n        name: 'Kantai Collection',\n        url: 'https://www.dmm.com/netgame/feature/kancolle.html',\n        icon_url: 'https://w0.peakpx.com/wallpaper/58/367/HD-wallpaper-anime-kantai-collection-yamakaze-kancolle.jpg',\n      },\n      title: entry.title,\n      url: entry.id,\n      image: {\n        url: `attachment://${fileName}`,\n      },\n      footer: {\n        text: `Danbooru • ${convertedTimestamp} • ${authorName || ''}`,\n        icon_url: 'https://avatars.githubusercontent.com/u/57931572?s=280&v=4',\n      },\n    };\n\n    const itemPayload = {\n      itemPayload: {embeds: [embed],\n      },\n    };\n\n    payloads.push(itemPayload);\n  }\n}\n\nreturn payloads;"
      },
      "id": "37c34e0c-4632-43a4-8af1-6090c151cc91",
      "name": "Main Driver Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2360,
        580
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "id": "725bf8e4-2227-4117-a6e2-8ad08817d865",
      "name": "Merge - Binary Data Branch",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2580,
        400
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 20
            }
          ]
        }
      },
      "id": "668c585c-2bfe-41e1-934a-9b21f0717fb4",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        660,
        380
      ]
    },
    {
      "parameters": {
        "jsCode": "const workflowStaticData = $getWorkflowStaticData('global');\nconst lastExecution =  workflowStaticData.lastExecution;\nworkflowStaticData.lastExecution = new Date().getTime();\nconst filteredEntries = [];\n\nfor (let item of items) {\n  const entries = item.json.feed.entry;\n\n  for (let entry of entries) {\n    const entryTimestamp = new Date(entry.updated).getTime();\n\n    if (entryTimestamp > lastExecution) {\n      // Perform your desired action for entries that are after the last execution\n      // For example, you can add them to the filteredEntries array or send them to the next node in the workflow\n\n      filteredEntries.push(entry);\n    }\n  }\n}\n\nreturn { filteredEntries };\n"
      },
      "id": "63a5ff91-ba54-4d55-b1ba-8edd63a32517",
      "name": "Entry Index Filter Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1200,
        560
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "id": "2888ff14-2082-4685-b9c7-ff4b16eb33fb",
      "name": "Item Lists",
      "type": "n8n-nodes-base.itemLists",
      "typeVersion": 2.1,
      "position": [
        1540,
        380
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const items = $json['filteredEntries'].map(entry => entry['link'][0]['href']);\n\nreturn { items };"
      },
      "id": "4c933cad-2b2a-4ea7-8f1c-e4000fa995a8",
      "name": "Return All Danbooru Post URLs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1380,
        380
      ]
    },
    {
      "parameters": {
        "jsCode": "let results = [];\n\nfor (items of items) {\n    for (key of Object.keys(items.binary)) {\n        results.push({\n            fileNameData: {\n                fileName: items.binary[key].fileName\n            }\n        });\n    }\n}\n\nreturn { results };"
      },
      "id": "f323f593-8475-4af4-80bd-3ec3405bb14c",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1900,
        640
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "fileNameProperty",
              "value": "={{ $json.results }}"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "id": "6f60ec30-0fd3-42db-8bd3-16119e534ded",
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        2040,
        640
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "id": "ea192950-d2b8-4d61-b87b-060a8fa15fd6",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2220,
        580
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "XML": {
      "main": [
        [
          {
            "node": "Entry Index Filter Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Danbooru API - Post URL": {
      "main": [
        [
          {
            "node": "HTML - Extract OG Image URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Danbooru API HTTP Request - Atom Feed": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Danbooru CDN API - Image Binary Data": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge - Binary Data Branch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Main Driver Code": {
      "main": [
        [
          {
            "node": "Merge - Binary Data Branch",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge - Binary Data Branch": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML - Extract OG Image URL": {
      "main": [
        [
          {
            "node": "Danbooru CDN API - Image Binary Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Danbooru API HTTP Request - Atom Feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Entry Index Filter Code": {
      "main": [
        [
          {
            "node": "Return All Danbooru Post URLs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Item Lists": {
      "main": [
        [
          {
            "node": "Danbooru API - Post URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return All Danbooru Post URLs": {
      "main": [
        [
          {
            "node": "Item Lists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Main Driver Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveDataSuccessExecution": "none",
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner",
    "saveDataErrorExecution": "none"
  },
  "versionId": "75acad6c-9702-4790-9eaa-fb37c0ab43a0",
  "id": "72",
  "meta": {
    "instanceId": "f3e8646dc25bb703680f7fd48308e56289d71dc10dc3ea0c5d57254342b6a676"
  },
  "tags": []
}